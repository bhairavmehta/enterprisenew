{
    "scenario_name": "LSTM-VAE anomaly detection multisensor scenario",
    "scenario_definition":
    {
      "inference_definition":
      {
        "in_topic": "in_topic_ad_multi_sensors_infer_test",
        "out_topic": "out_topic_ad_multi_sensors_infer_test",
        "model_descriptor":
        {
          "model_type": "TENSORFLOW",
          "model_name": "anomalydetection_multisensor",
          "model_input_info": [
            {
                "data_name": "input_sequence",
                "data_type": "float32",
                "data_shape": [1,64,10]
            }
          ],
          "model_output_info": [
            {
                "data_name": "likelihood/stack", 
                "data_type": "float32",
                "data_shape": [1,64,10]
            }
          ],
          "model_location": "http://jerrylia-lx-1.guest.corp.microsoft.com:8081/lstm-vae-anomaly-detector-multisensor.pb"
        },
        "pred_type":
        {
          "prediction_data_type": "classificationtype"
        }
      },
      "notification_definition":
      {
        "in_topic": "out_topic_ad_multi_sensors_infer_test",
        "out_topic": "out_topic_ad_multi_sensors_notif_test",
        "rules": [
          {
            "rule_name": "is_normal_0", 
            "rule_content": "np.mean(prediction['likelihood/stack'].data, axis=1).flatten()[0] > -2", 
            "notification_id": "test_notification_is_normal_0"
          },
          {
            "rule_name": "is_abnormal_0", 
            "rule_content": "np.mean(prediction['likelihood/stack'].data, axis=1).flatten()[0] <= -2", 
            "notification_id": "test_notification_is_abnormal_0"
          },
          {
            "rule_name": "is_normal_1", 
            "rule_content": "np.mean(prediction['likelihood/stack'].data, axis=1).flatten()[1] > -2", 
            "notification_id": "test_notification_is_normal_1"
          },
          {
            "rule_name": "is_abnormal_1", 
            "rule_content": "np.mean(prediction['likelihood/stack'].data, axis=1).flatten()[1] <= -2", 
            "notification_id": "test_notification_is_abnormal_1"
          },
          {
            "rule_name": "is_normal_2",
            "rule_content": "np.mean(prediction['likelihood/stack'].data, axis=1).flatten()[2] > -2", 
            "notification_id": "test_notification_is_normal_2"
          },
          {
            "rule_name": "is_abnormal_2", 
            "rule_content": "np.mean(prediction['likelihood/stack'].data, axis=1).flatten()[2] <= -2",
            "notification_id": "test_notification_is_abnormal_2"
          }          
        ]
      }
    }
  }

